create table department(
dept_name varchar(20),
building varchar(15),
budget numeric(12,2),
primary key(dept_name));

create table course(
course_id varchar(7),
title varchar(50),
dept_name varchar(20),
credits numeric(2,0),
primary key(course_id),
foreign key(dept_name) references department
);

create table instructor(
ID varchar(5),
name varchar(20) not null,
dept_name varchar(20),
salary numeric(8,2),
primary key(ID),
foreign key(dept_name) references department
);

create table section(
course_id varchar(8),
sec_id varchar(8),
semester varchar(6),
year numeric(4,0),
building varchar(15),
room_number varchar(7),
time_slot_id varchar(4),
primary key (course_id, sec_id, semester, year),
foreign key (course_id) references course
);

create table teaches(
ID varchar(5),
course_id varchar(8),
sec_id varchar(8),
semester varchar(6),
year numeric(4,0),
primary key(ID, course_id, sec_id, semester, year),
foreign key(course_id, sec_id, semester, year) references section,
foreign key(ID) references instructor
);
drop table section;

select * from department;
insert into department values ('Biology', 'Watson', 90000);
insert into department values ('Comp. Sci.', 'Taylor', 100000);
insert into department values ('Elec. Eng.', 'Taylor', 85000);
insert into department values ('Finance', 'Painter', 50000);
insert into department values ('History', 'Painter', 80000);
insert into department values ('Music', 'Packard', 80000);
insert into department values ('Physics', 'Watson', 70000);

select * from course;
insert into course values ('BIO-101', 'Intro. to Biology', 'Biology',  4);
insert into course values ('BIO-301', 'Genetics', 'Biology',  4);
insert into course values ('BIO-399', 'Computational Biology', 'Biology',  3);
insert into course values ('CS-101', 'Intro. to Computer Science', 'Comp. Sci.',  4);   
insert into course values ('CS-190', 'Game Design', 'Comp. Sci.',  4);
insert into course values ('CS-315', 'Robotics', 'Comp. Sci.',  3);
insert into course values ('CS-319', 'Image Processing', 'Comp. Sci.',  3);
insert into course values ('CS-347', 'Database System Concepts', 'Comp. Sci.',  3);
insert into course values ('EE-181', 'Intro. to Digital Systems', 'Elec. Eng.',  3);
insert into course values ('FIN-201', 'Investment Banking', 'Finance',  3);
insert into course values ('HIS-351', 'World History', 'History',  3);
insert into course values ('MU-199', 'Music Video Production', 'Music',  3);
insert into course values ('PHY-101', 'Physical Principles', 'Physics',  4);

select * from instructor;
insert into instructor values (10101, 'Srinivasan', 'Comp. Sci.', 65000);
insert into instructor values (12121, 'Wu', 'Finance',  90000);
insert into instructor values (15151, 'Mozart', 'Music',  40000);
insert into instructor values (22222, 'Einstein', 'Physics',  95000);
insert into instructor values (32343, 'El Said', 'History',  60000);
insert into instructor values (33456, 'Gold', 'Physics',  87000);
insert into instructor values (45565, 'Katz', 'Comp. Sci.',  75000);
insert into instructor values (58583, 'Califieri', 'History',  62000);
insert into instructor values (76543, 'Singh', 'Finance',  80000);
insert into instructor values (76766, 'Crick', 'Biology',  72000);
insert into instructor values (83821, 'Brandt', 'Comp. Sci.',  92000);
insert into instructor values (98345, 'Kim', 'Elec. Eng.',  80000);

select * from section;
insert into section values ('BIO-101', '1', 'Summer', 2009, 'Painter', '514', 'B');
insert into section values ('BIO-301', '1', 'Summer', 2010, 'Painter', '514', 'A');
insert into section values ('CS-101', '1', 'Fall', 2009, 'Packard', '101', 'H');
insert into section values ('CS-101', '1', 'Spring', 2010, 'Packard', '101', 'F');
insert into section values ('CS-190', '1', 'Spring', 2009, 'Taylor', '3128', 'E');
insert into section values ('CS-190', '2', 'Spring', 2009, 'Taylor', '3128', 'A');
insert into section values ('CS-315', '1', 'Spring', 2010, 'Watson', '120', 'D');
insert into section values ('CS-319', '1', 'Spring', 2010, 'Watson', '100', 'B');
insert into section values ('CS-319', '2', 'Spring', 2010, 'Taylor', '3128', 'C');
insert into section values ('CS-347', '1', 'Fall', 2009, 'Taylor', '3128', 'A');
insert into section values ('EE-181', '1', 'Spring', 2009, 'Taylor', '3128', 'C');
insert into section values ('FIN-201', '1', 'Spring', 2010, 'Packard', '101', 'B');
insert into section values ('HIS-351', '1', 'Spring', 2010, 'Painter', '514', 'C');
insert into section values ('MU-199', '1', 'Spring', 2010, 'Packard', '101', 'D');
insert into section values ('PHY-101', '1', 'Fall', 2009, 'Watson', '100', 'A');

select * from teaches;
insert into teaches values('10101', 'CS-101', '1', 'Fall', 2009),
insert into teaches values('10101', 'CS-315', '1', 'Spring', 2010),
insert into teaches values('10101', 'CS-347', '1', 'Fall', 2009),
insert into teaches values('12121', 'FIN-201', '1', 'Spring', 2010),
insert into teaches values('15151', 'MU-199', '1', 'Spring', 2010),
insert into teaches values('22222', 'PHY-101', '1', 'Fall', 2009),
insert into teaches values('32343', 'HIS-351', '1', 'Spring', 2010),
insert into teaches values('45565', 'CS-101', '1', 'Spring', 2010),
insert into teaches values('45565', 'CS-319', '1', 'Spring', 2010),
insert into teaches values('76766', 'BIO-101', '1', 'Summer', 2009),
insert into teaches values('76766', 'BIO-301', '1', 'Summer', 2010),
insert into teaches values('83821', 'CS-190', '1', 'Spring', 2009),
insert into teaches values('83821', 'CS-190', '2', 'Spring', 2009),
insert into teaches values('83821', 'CS-319', '2', 'Spring', 2010),
insert into teaches values('98345', 'EE-181', '1', 'Spring', 2009)

select * from section;

delete from course;

select name from instructor
	where dept_name = 'Comp. Sci.' and salary > 70000;

'''consultar nombre del instructor, nombre del departamento, presupuesto'''
select instructor.name, department.dept_name, department.budget
	from instructor, department
	
'''para ponerlo como variable :D'''
select i.name, d.dept_name, d.budget
	from instructor as i, department as d;

'''para que no se repitan datos entre dos tablas'''
select name, instructor.dept_name, building
	from instructor, department
	where instructor.dept_name= department.dept_name;

select distinct name, course_id
	from instructor, teaches
	where instructor.ID= teaches.ID;
	
''' filtra cosas antes de %ñiñiñi%. '''
select dept_name
	from department
	where building like 'T%';
	
'''consultar nombre y presupuesto de los departamentos que comienzan por la letra S'''
select department.dept_name, department.budget
	from department
	where building like '%S';
	
'''consultar el nombre del instructor, el nombre del curso, el nombre del semestre y el año cuando se oriento el curso'''
select i.name, co.title , t.semester, t.year
	from instructor as i, course as co, teaches as t
	where i.ID = t.ID and co.course_id = t.course_id;

''' actualizar el valor de algun atributo '''
select * from instructor
update instructor
	set salary= salary * 1.05
	where salary < 70000;
	
'''actualizar el presupuesto incrementando en un 10% los valores del departamento de musica y biologia'''
select * from department
update department
	set budget = budget * 1.1
	where dept_name = 'Biology' or dept_name = 'Music'; '''or porque esta mondà no se cumple con y, imbecil'''
	
	
'''crear una columna nueva llamada prueba con el tipo de dato varchar de 20 caracteres con la tabla instructor'''
alter table instructor add prueba varchar(20)
select * from instructor

---  borra la columna
alter table instructor drop fecha_contratacion;
select * from instructor

'''para relacionar una tabla con el mismo atributo debe tener el mismo tipo de dato.'''

'''llenar el valor hola a la tupla de instructor "einstein" en la columna prueba'''
update instructor
	set prueba = 'hola'
	where instructor.name = 'Einstein';

																					'''Ejercicios'''
'''1) Crear una nueva columna llamada fecha_contratacion en la tabla instructor.'''
alter table instructor add fecha_contratacion date
select * from instructor

'''2) Crear una nueva columna llamada hora_ingreso en la tabla instructor. '''
alter table instructor add hora_ingreso time
select * from instructor

'''3) Llenar en las nuevas columnas datos para los instructores: Gold, Mozart y Kim.'''
update instructor
	set fecha_contratacion = '11/5/2022', hora_ingreso = '12:00'
 	where instructor.name = 'Gold' or instructor.name = 'Mozart' or instructor.name = 'Kim';

'''4) Tomando como referencia las tablas curso y departamento, consultar las columnas: codigo del curso, titulo, creditos y edificio donde se orientan los cursos.'''
select c.course_id, c.title, c.credits, d.building 
	from course as c, department as d
	where c.dept_name = d.dept_name

'''ordena por llave'''
select name
	from instructor
	where dept_name = 'Physics'
	order by name;

'''le da el orden que yo quiero'''
select *
	from instructor
	order by salary desc, name asc;

'''union'''
select course_id
	from section
	where semester = 'Fall' and year = 2009
union
select course_id
	from section
	where semester = 'Spring' and year = 2010;
	
'''interseccion'''
select course_id
	from section
	where semester = 'Fall' and year = 2009
intersect
select course_id
	from section
	where semester = 'Spring' and year = 2010;
	
'''diferencia'''
select course_id
	from section
	where semester = 'Fall' and year = 2009
except
select course_id
	from section
	where semester = 'Spring' and year = 2010;


'''filtrar datos nulos'''
select name
	from instructor
	where salary is null;
	
select i.name, i.dept_name
	from instructor as i
	where hora_ingreso is null;

'''
acá falta algo xd.
'''

'''buscar no se que xuxa'''
select name, salary
	from instructor
	where salary < (select salary 
				   from instructor
				   where name = 'Califieri')

'''in'''
select distinct course_id
from section
where semester = 'Fall' and year = 2009 and course_id in (select course_id
														  from section
														  where semester = 'Spring' and year = 2010)
														  
'''not in'''
select distinct course_id
from section
where semester = 'Fall' and year = 2009 and course_id not in (select course_id
															  from section
															  where semester = 'Spring' and year = 2010)
'''some'''																
select name, salary, dept_name
from instructor
where salary > some (select salary
					from instructor
					where dept_name = 'dp') '''todo el parentesis debe ser verdadero para que toda la consulta sea verdadera y funcione'''
					
'''all'''	
select d.dept_name, d.budget
from department as d
where d.budget > all(select d.budget
					from department as d
					where d.building = 'Taylor') '''no tengo presupuestos mayores'''
					
'''exists'''
select course_id
	from section as s
	where semester = 'Fall' and year = 2009 and
		exists(select *
			  from section as t
			  where semester = 'Spring' and year = 2010 and s.course_id = t.course_id)
'''evidencias uwuuwuwuwu
- consulta externa: salen 3 tuplas "CS-101", "CS-347" y "PHY-101".
- consulta interna: no salen tuplas porque "s" no està declarada, y aun mas interna sin la igualdad salen: "CS-101", "CS-315", "CS-319", "CS-319", "FIN-201", "HIS-351" y "MU-199".
- consulta completa: solo sale "CS-101". '''

'''not exists'''
select course_id
	from section as s
	where semester = 'Fall' and year = 2009 and
		not exists(select *
			  from section as t
			  where semester = 'Spring' and year = 2010 and s.course_id = t.course_id)
			  
'''los datos de los instructores que no han dictado clase'''
select *
	from instructor
	where not exists(select * 
					 from teaches
					where instructor.ID = teaches.ID)
	
select * 
	from course 
	where dept_name in (select dept_name 
						from instructor 
						where dept_name = 'Physics');

select * 
from teaches 
where id in (select id 
			 from instructor 
			 where dept_name = 'Physics');

select name 
	from instructor 
	where id in (select id 
				 from teaches);

select name 
	from instructor 
	where exists (select * 
				  from teaches);
				  
create table student
(ID varchar (5),
name varchar (20) not null,
dept_name varchar (20),
tot_cred numeric (3,0),
primary key (ID),
foreign key (dept_name) references department
);

select * from student
insert into student values(00128, 'Zhang', 'Comp. Sci.', 102);
insert into student values(12345, 'Shankar', 'Comp. Sci.', 32);
insert into student values(19991, 'Brandt', 'History', 80);
insert into student values(23121, 'Chavez', 'Finance', 110);
insert into student values(44553, 'Peltier', 'Physics', 56);
insert into student values(45678, 'Levy', 'Physics', 46);
insert into student values(54321, 'Williams', 'Comp. Sci.', 54);
insert into student values(55739, 'Sanchez', 'Music', 38);
insert into student values(70557, 'Snow', 'Physics', 0);
insert into student values(76543, 'Brown', 'Comp. Sci.', 58);
insert into student values(76653, 'Aoi', 'Elec. Eng.', 60);
insert into student values(98765, 'Bourikas', 'Elec. Eng.', 98);
insert into student values(98988, 'Tanaka', 'Biology', 120);

create table takes
(ID varchar(5),
course_id varchar (8),
sec_id varchar (8),
semester varchar (6),
year numeric (4,0),
grade varchar (2),
primary key (ID, course_id, sec_id, semester, year),
foreign key (course_id, sec_id, semester, year) references section,
foreign key (ID) references student
);

select * from takes
insert into takes values(00128,'CS-101', 1, 'Fall', 2009, 'A');
insert into takes values(00128, 'CS-347', 1, 'Fall', 2009 ,'A');
insert into takes values(12345, 'CS-101', 1, 'Fall', 2009, 'C');
insert into takes values(12345, 'CS-190', 2, 'Spring', 2009, 'A');
insert into takes values(12345, 'CS-315', 1, 'Spring', 2010, 'A');
insert into takes values(12345, 'CS-347', 1, 'Fall', 2009, 'A');
insert into takes values (19991, 'HIS-351', 1, 'Spring', 2010, 'B');
insert into takes values (23121, 'FIN-201', 1, 'Spring', 2010, 'C+');
insert into takes values (44553, 'PHY-101', 1, 'Fall', 2009, 'B');
insert into takes values (45678, 'CS-101', 1, 'Fall', 2009, 'F');
insert into takes values (45678, 'CS-101', 1 ,'Spring', 2010, 'B+');
insert into takes values (45678, 'CS-319', 1, 'Spring', 2010, 'B');
insert into takes values (54321, 'CS-101', 1, 'Fall', 2009, 'A');
insert into takes values (54321, 'CS-190', 2, 'Spring', 2009 ,'B+');
insert into takes values (55739, 'MU-199', 1, 'Spring', 2010, 'A');
insert into takes values (76543, 'CS-101', 1, 'Fall', 2009, 'A');
insert into takes values (76543, 'CS-319', 2, 'Spring', 2010, 'A');
insert into takes values (76653, 'EE-181', 1, 'Spring', 2009, 'C');
insert into takes values (98765, 'CS-101', 1, 'Fall', 2009, 'C');
insert into takes values (98765, 'CS-315', 1, 'Spring', 2010, 'B');
insert into takes values (98988, 'BIO-101', 1, 'Summer', 2009 ,'A');
insert into takes values (98988, 'BIO-301', 1, 'Summer', 2010, null);

select dept_name, sum(tot_cred)
from student
group by dept_name
having sum(tot_cred) > 200
		 
select distinct s.ID, s.name
	from student as s
	where exists((select course_id
					from course
					where dept_name = 'Biology')
					except(select t.course_id
						  from takes as t
						  where s.id = t.id))
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- SUBCONSULTAS

select dept_name, avg_salary from (select dept_name, avg(salary)
								  from instructor 
								  group by dept_name)
								  as dept_avg (dept_name, avg_salary)
							where avg_salary > 42000;
							

select building, sum_budg from (select building, sum(budget)
							   from department
							   group by building)
							   as sum_pres (building, sum_budg)
						   where sum_budg > 150000;
						   


select semester, cant_course from (select semester, count(course_id)
							   from teaches
							   group by semester)
							   as ct_cursos (semester, cant_course)
						     where cant_course > 8;
							 
select dept_name, min(min_pres) from (select dept_name, sum(budget)
					 from department
					 group by dept_name)
					 as mn_prs (dept_name, min_pres)

-- EXIST 

select course_id 
from section as S
where semester = 'Fall' and year = 2009 and
exists(select * from section as T
	  where semester = 'Spring' and year = 2010 and
	  		S.course_id = T.course_id);
			    
				
select * from instructor as i where not exists(select * from teaches as t where t.id = i.id);

--SUBCONSULTAS CON DELETE

delete from teaches 
where course_id in (select course_id
				   from course
				   where course_id = 'CS-101');
				   
select * from teaches


-- SUBCONSULTAS CON INSERT INTO

create table department_copia(
dept_name varchar(20),
building varchar(15),
budget numeric(12,2),
primary key (dept_name));

insert into department_copia
select * from department

select * from department_copia

-- SUBCONSULTAS CON UPDATE

update instructor set salary = salary*1.05 where salary < (select avg(salary) from instructor);

-- ejercicios:  1) eliminar las tuplas de los cursos orientados en el a챰o 2009 y en primavera de la tabla teaches (con subconsulta)

delete from teaches 
where course_id in (select course_id
				   from section
				   where semester = 'Spring' and year = 2009);
				   
select * from teaches


-- 2) actualizar los presupuestos de los departamentos cuyo edificio es taylor, en un 100%
update department set budget = 2*budget where building in (select building from department where building = 'Taylor');

select * from department

-- BETWEEN: buscar entre rangos de numeros, fechas, horas


'''join'''
select *
from student join takes on student.ID = takes.ID

select *
from instructor join teaches on instructor.ID = teaches.ID

'''natural left outer join: tons escoge todo lo de a junto a la interseccion b'''
select * from student natural left outer join takes where tot_cred = 0

select * from instructor left outer join teaches on instructor.ID = teaches.ID where teaches.ID is null
       
select * from takes natural right outer join student

select * from course left outer join teaches on course.course_id = teaches.course_id

select * from instructor natural right outer join teaches where instructor is not null

select * from student natural full outer join takes
select * from student natural join takes

'''consultar todos los datos de la tabla cursos registrados o tomados por los estudiantes en primavera'''
select * from student natural full outer join takes where semester = 'Spring'

select * from student natural full outer join takes where semester != 'Spring'

'''crear vistas union o alguna chota asi'''

create view faculty as
select ID, name, dept_name
from instructor

select * from faculty
drop view estudiantes_calificacion_A

create view instructores_CS_190 as
select instructor.*
from instructor, teaches
where instructor.ID = teaches.ID

select * from instructores_CS_190

create view estudiantes_calificacion_A as
select student.*, takes.grade, takes.course_ID
from student, takes
where student.ID = takes.ID 
	and takes.grade = 'A'

select * from estudiantes_calificacion_A

create view physics_fall_2009 as
select co.course_id, sec_id, building, room_number
from course as co, section as se
where co.course_id = se.course_id
	and co.dept_name = 'Physics'
	and se.semester = 'Fall'
	and se.year = '2009'
	
select course_id
from physics_fall_2009
where building = 'Watson'

insert into faculty values('30765', 'Green', 'Music')
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
'''Transacciones'''
select * from instructor

begin -- iniciar transaccion
insert into instructor values (3333, 'Jorge Ramirez', 'Music', 100000)
rollback  -- cancelar transaccion
commit -- confirmar transaccion

begin
update instructor
	set salary = salary * 1.10
rollback
	
begin
delete from instructor 
	where name = 'Jorge Ramirez'
commit

select * from department;
begin
update department 
	set budget = budget * 1.20 
	where dept_name = 'Comp. Sci'
commit

begin
update department 
	set building = 'Beethoven' 
	where dept_name = 'Music';
rollback

'''RESTRICCIONES DE INTEGRIDAD'''

'''Unique'''
select * from instructor;
alter table instructor 
add mail varchar(20) unique;

update instructor 
set mail = 'redbull@gmail.com' 
where name = 'Einstein';

update instructor 
set mail = 'einstein@gmail.com' 
where name = 'Green';

'''Check'''

alter table instructor 
add constraint min_salary
CHECK(salary > 0);

update instructor 
set salary = 50000 
where name = 'Green';

select * from instructor;

'''Ejercicios:'''
-- 1) Modificar la tabla cursos para que el numero de creditos sea superior a 0

alter table course 
add constraint min_credits
CHECK(credits > 0);

select * from course;

update course 
	set credits = -1 
	where title = 'Genetics'

-- 2)Añadir una nueva columna a la tabla cursos llamada area y tiene que ser unica
alter table course 
add area varchar(20) unique

update course 
	set area = 'Ciencias' 
	where title = 'Genetics'

select * from course;

update course 
set area = 'Ciencias' 
where title = 'Robotics'

'''ejercicio: nueva colunma: fecha_nacimiento. y a 3 instructores entre enero y marzo del 80'''
alter table instructor add fecha_nacimiento date

update instructor set fecha_nacimiento = '16/01/1980' where name = 'Srinivasan'
update instructor set fecha_nacimiento = '18/02/1980' where name = 'Wu'
update instructor set fecha_nacimiento = '09/03/1980' where name = 'Mozart'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Einstein'
update instructor set fecha_nacimiento = '09/04/1980' where name = 'El Said'
update instructor set fecha_nacimiento = '18/02/1980' where name = 'Gold'
update instructor set fecha_nacimiento = '09/03/1980' where name = 'Katz'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Califieri'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Singh'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Crick'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Brandt'
update instructor set fecha_nacimiento = '02/09/1980' where name = 'Kim'

select *
from instructor
where fecha_nacimiento 
between '01/01/1980' and '31/03/1980'

'''nombre del instructor, nombre del departamento, dia de nacimiento, mes de nacimiento y año'''
select name, dept_name, extract(day from fecha_nacimiento) as dia, extract(month from fecha_nacimiento) as mes, extract(year from fecha_nacimiento) as ano
from instructor


'''valores por defecto'''
'''ejercicio: modificar la tabla prueba para que tenga por defecto en el salario el valor de 10000'''
select * from prueba
'''7 enteros, 0 decimales'''
create table prueba(
nombre varchar (30) not null,
salario numeric (7, 0) default 1160000, 
primary key(nombre)
);

insert into prueba values ('Pedro el escamoso')
insert into prueba values ('Josefa la burrita')
insert into prueba values ('Peppa la cerdita')

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
'''agregar una foto como tipo de dato'''
alter table student
add foto bytea

'''crear un tipo de dato'''
select * from prueba
create domain salario_anual numeric (12, 2)
constraint p_sal check(value >= 19000.00)

alter table prueba
alter column salario set data type salario_anual

-- aaaaaaaaaaaaaaaaaa.
select * from department
create domain prueba_sal numeric (15, 1)
constraint p_sal check(value >= 19000.00)

alter table department
alter column budget set data type prueba_sal

-- aaaaaaaaaaaaaaaaaa.
'''tenes que borrar las vistas para poder modificar las columnas'''
drop view faculty
create domain nombre_persona varchar(40) not null

alter table instructor
alter column name set data type nombre_persona

-- pata
select * from instructor
create type cities_list as enum ('Neiva York', 'Tumaco', 'Barrancabermeja')

alter table instructor
add column city cities_list

insert into instructor values (13434, 'Yoongi', 'Comp. Sci.',  65000, null, null, null, null, null, 'Tumaco');

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- crear tabla registro_instructor
create table registro_instructor(
name varchar(20) not null,
salary numeric(8, 2),
fecha_modificacion date,
salario_nuevo numeric (8, 2)
);
select * from instructor
select * from registro_instructor


-- paso 3: crear la funciòn
create or replace function actualizar_salario()
returns trigger as $insertar$
declare
begin
	insert into registro_instructor values(old.name, old.salary, current_date, new.salary);
	return null;
end;
$insertar$ language plpgsql;

-- paso 4: crear el trigger actualizar_instructor
create trigger actualizar_instructor after update
on instructor for each row
execute procedure actualizar_salario();

-- paso 5: probar el trigger
update instructor 
set salary = salary*1.20
where id =  '12121'

/*Crear un trigger para registrar de la tabla estudiantes el id, nombre del estudiante, nombre del departamento y total creditos cuando se elimine, actualice e inserte
en la misma tabla con el proposito de conservar datos antiguos y mostrar los nuevos.*/

select * from student
select * from registro_estudiantes
create table registro_estudiantes(
id varchar (5),
name varchar (20),
dept_name varchar (20),
tot_cred numeric (3)
);

create or replace function ejercicio1()
returns trigger as $ejercicio1$
declare
begin
	insert into registro_estudiantes values(old.id, old.name, old.dept_name, old.tot_cred);
	return null;
end;
$ejercicio1$ language plpgsql;

create trigger borra_est after delete
on student for each row
execute procedure ejercicio1();

delete from student
where id = '93039'

create trigger insert_est after insert
on student for each row
execute procedure ejercicio1();

insert into student values ('93039', 'yoongi', 'Music', 23)

--------------------------------------------------------aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
create or replace function ejercicio2()
returns trigger as $ejercicio2$
declare
begin
	insert into registro_estudiantes values(new.id, new.name, new.dept_name, new.tot_cred);
	return null;
end;
$ejercicio2$ language plpgsql;


/*ingresar datos en la tabla movimiento, los datos pueden ser de 2 tipos (E) que significa entrada y (S) que significa salida.
Cuando se ingrese un registro en la tabla movimiento, un trigger debe dispararse para que se creee una tupla en la tabla saldos y registre la opecación matematica
correcta*/
create table movimiento(
	idmovimiento serial primary key,
	fecha timestamp NOT null,
	codigoproducto int NOT null,
	tipomovimiento varchar(1) NOT null,
	cantidad int not null,
	valor int NOT null
);

create table saldos(
	idsaldo serial primary key,
	codigoproducto int NOT null,
	fecha timestamp NOT null,
	nuevosaldo int NOT null
);


create or replace function actualizar_saldo() returns trigger as $body$
declare 
	ultimosaldo int=0;
	registros int=0;
begin
	select count(1) into registros from saldos where codigoproducto=new.codigoproducto;
	if registros>0 then 
		select nuevosaldo into ultimosaldo from saldos where idsaldo=(select max(idsaldo) from saldos where codigoproducto=new.codigoproducto);
	end if;
	if new.tipomovimiento='E' then
		ultimosaldo=ultimosaldo+new.cantidad;
	else
		ultimosaldo=ultimosaldo - new.cantidad;
	end if;
	insert into saldos(codigoproducto, fecha, nuevosaldo) values (new.codigoproducto, current_timestamp, ultimosaldo);
	return new;
end;
$body$ language plpgsql;

create trigger actualizar_valores before insert



-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
create table autor(
	id int, 
	nombre character varying (30) not null,
	fecha_nacimiento date not null,
	genero char(2) not null,
	primary key (id)
);

insert into autor (id, nombre,fecha_nacimiento,genero)
	values (1, 'Gabriel Garcia Marquez', '6/3/1973','M'),
		   (2,  'Franz Kafka', '3/7/1983','M'),
		   (3, 'Jorge Luis Borges','24/8/1982','M'),
		   (4, 'Isabel Allende', '5/4/1980','F'),
		   (5, 'Rosa Montero','9/10/1970','F'),
		   (6, 'Ana Milena Robles','3/7/1990','NB'),
		   (7, 'Andres Diaz','5/1/1992','NB');
		   
		   
-- crear tabla registro_instructor
create table informacion_autor(
	nombre character varying (30) not null,
	fecha_nacimiento date not null,
	edad int
);

select * from autor
select * from informacion_autor

alter table autor 
add edad int;


-- paso 3: crear la funciòn
create or replace function calcular_edad()
returns trigger as $calcular$
declare
begin
	insert into informacion_autor values(old.nombre, old.fecha_nacimiento, (current_date - old.fecha_nacimiento) / 365);
	return null;
end;
$calcular$ language plpgsql;

-- paso 4: crear el trigger actualizar_instructor
create trigger busca after update
on autor for each row
execute procedure calcular_edad();
drop trigger busca on autor

-- paso 5: probar el trigger
update autor 
set edad = (current_date - fecha_nacimiento) / 365
where id =  1


-- Crear un trigger que SOLO se dispare cuando se incremente el numero total de creditos en un 50% de los estudiantes 
-- Registar los datos necesarios (nombre, departamento y los creditos actualizados)


-- crear tabla registro_instructor
create table registro_estd(
name varchar(40),
dept_name varchar(40),
creditos numeric(3)
);
drop table registro_estd



select * from student
select * from registro_estd


-- paso 3: crear la funciòn
create or replace function incrementar_cred()
returns trigger as $incrementar$
declare
begin
	insert into registro_estd values(new.name, new.dept_name, new.tot_cred);
	return null;
end;
$incrementar$ language plpgsql;

-- paso 4: crear el trigger actualizar_instructor
create trigger inc before update
on student for each row
execute procedure incrementar_cred();
drop trigger inc on student


-- paso 5: probar el trigger
update student 
set tot_cred = tot_cred*1.50
where id = '44553'


-- ARREGLAR EL CONDICIONAL DE 50%



-- ************************************************************************************************************************************************************************************


-- cuando se elimine una tupla de la tabla de cursos se registre en la nueva tabla

create table registro_cou(
course_id varchar(7),
title varchar(50),
dept_name varchar(20),
credits numeric(2,0)
);
drop table registro_cou

select * from course
select * from registro_cou


-- paso 3: crear la funciòn
create or replace function borra()
returns trigger as $si$
declare
begin
	insert into registro_cou values(old.course_id, old.title, old.dept_name, old.credits);
	return null;
end;
$si$ language plpgsql;

-- paso 4: crear el trigger actualizar_instructor
create trigger borrarborrar before delete
on course for each row
execute procedure borra();
drop trigger borrarborrar on course


-- paso 5: probar el trigger
delete from course where dept_name = 'Biology'
